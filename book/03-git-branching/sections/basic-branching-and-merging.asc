=== Grundlagen des Verzweigens und Zusammenführens

Lassen Sie uns ein einfaches Beispiel für das Verzweigen und Zusammenführen durchgehen, wie es Ihnen bei einem Arbeitsablauf in der realen Welt begegnen könnte.
Sie werden diesen Schritten folgen:

. Erledigen von Arbeiten an einer Website.
. Erzeugen eines Branches für eine neue Geschichte, an der Sie gerade arbeiten.
. Durchführen einiger Arbeiten innerhalb des Branches.

Zu diesem Zeitpunkt erhalten Sie einen Anruf, dass ein anderer Sachverhalt kritisch ist und Sie den Fehler schnell beheben müssen.
Sie werden Folgendes tun:

. Wechseln Sie zu Ihrem Produktionsbranch.
. Legen Sie einen neuen Branch an, um den Fehler zu beheben.
. Nachdem dies getestet wurde, integrieren Sie den Fehlerbehungsbranch und laden das Ganze in die Produktionsumgebung hoch.
. Wechseln Sie zurück zu Ihrer ursprünglichen Geschichte und arbeiten Sie weiter daran.

[[_basic_branching]]
==== Grundlagen des Verzweigens

(((branches, basic workflow)))
Lassen Sie uns zunächst annehmen, Sie arbeiten an Ihrem Projekt und haben bereits ein paar Commits gemacht.

.Ein einfacher Commit-Verlauf
image::images/basic-branching-1.png[Ein einfacher Commit-Verlauf.]

Sie haben sich dafür entschieden, an Sachverhalt #53 zu arbeiten in irgendeinem Fehlerverfolgunssystem, dass Ihre Firma benutzt.
Um einen neuen Branch anzulegen und gleichzeitig zu diesem zu wechseln, können Sie die Anweisung `git checkout` zusammen mit der Option `-b` ausführen:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

Das ist die Kurzversion von:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Erzeugen eines neuen Branch-Zeigers
image::images/basic-branching-2.png[Erzeugen eines neuen Branch-Zeigers.]

Sie arbeiten an Ihrer Website und führen einige Commits durch.
Wenn Sie das machen, bewegt das den `iss53`-Branch vorwärts, weil Sie ihn ausgecheckt haben (das bedeutet, Ihr `HEAD` zeigt auf diesen Branch):

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

.Der iss53-Branch hat sich bei Ihrer Arbeit vorwärts bewegt
image::images/basic-branching-3.png[Der iss53-Branch hat sich bei Ihrer Arbeit vorwärts bewegt.]

Jetzt bekommen Sie den Anruf, dass es ein Problem mit der Website gibt und Sie es umgehend beheben müssen.
Bei Git müssen Sie die Fehlerbehebung nicht zusammen mit den Änderungen bereitstellen, die Sie bereits an `iss53` vorgenommen haben, und Sie müssen auch keinen großen Aufwand damit betreiben, diese Änderungen rückgängig zu machen, bevor Sie daran arbeiten können, Ihre Fehlerbehebung auf das anzuwenden, was sich in der Produktionsumgebung befindet.
Alles, was Sie machen müssen, ist, zu Ihrem `master`-Branch zurück zu wechseln.

Bevor Sie das tun, beachten Sie jedoch, dass Git Sie nicht die Branches wechseln lassen wird, wenn in Ihrem Arbeitsverzeichnis oder Ihrem Index Änderungen existieren, welche Konflikte mit dem Branch erzeugen können, den Sie gerade auschecken.
Am besten ist es, einen sauberen Arbeitsstatus zu haben, wenn Sie die Branches wechseln.
Es gibt Möglichkeiten, dies zu umzugehen (namentlich sogenanntes Stashing und das Abändern von Commits), was wir später in <<_git_stashing>> behandeln.
Lassen Sie uns vorerst annehmen, Sie haben für alle Ihre Änderungen Commits durchgeführt, sodass Sie zu Ihrem `master`-Branch zurück wechseln können.

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

Zu diesem Zeitpunkt befindet sich das Arbeitsverzeichnis des Projektes in exakt dem gleichen Zustand, in dem es sich befand, bevor Sie mit der Arbeit an Sachverhalt #53 begonnen haben und Sie können sich direkt auf die Fehlerbehebung konzentrieren.
Dabei sollte man diesen wichtigen Punkt bedenken: wenn Sie die Branches wechseln, setzt Git Ihr Arbeitsverzeichnis zurück, um genauso auszusehen, wie zu dem Zeitpunkt, als Sie den letzten Commit auf diesem Branch durchgeführt haben.
Dateien werden automatisch hinzugefügt, entfernt und verändert, um sicherzustellen, dass Ihre Arbeitskopie auf dem selben Stand ist wie zum Zeitpunkt Ihres letzten Commits auf diesem Branch.

Als Nächstes müssen Sie sich um die Fehlerbehebung kümmern.
Lassen Sie uns einen Branch namens ``hotfix'' erstellen, an dem Sie bis zu dessen Fertigstellung arbeiten.

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

.Auf `master`-Branch basierender hotfix-Branch 
image::images/basic-branching-4.png[Auf `master`-Branch basierender hotfix-Branch.]

Sie können Ihre Tests durchführen und sicherstellen, dass der Hotfix seinen Zweck erfüllt und ihn dann mit dem master-Branch zusammenführen, um ihn in die Produktionsumgebung zu integrieren.
Das machen Sie mit der Anweisung `git merge`:(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Ihnen wird bei diesem Zusammenführen der Ausdruck ``fast-forward'' auffallen.
Da der Commit, auf den der Branch zeigte, den Sie integriert haben, unmittelbar von dem letzten Commit abstammt, auf dem Sie sich befinden, bewegt Git den Zeiger einfach weiter.
Um es anders auszudrücken, wenn Sie versuchen, einen Commit mit einem anderen Commit zu verschmelzen, welcher erreicht werden kann, in dem man einfach dem Commit-Verlauf des ersteren Commits folgt, dann vereinfacht Git die Dinge durch Vorwärtsbewegen des Zeigers, weil es sich hier nicht um auseinanderlaufende Entwicklungsstränge handelt, die miteinander zu verschmelzen sind - dies wird ``fast-forward'' genannt.

Ihre Änderung befindet sich nun im Schnappschuss des Commits, auf den der `master`-Branch zeigt und Sie können Ihre Fehlerbehebung anwenden.

.`master` wurde vorgespult zu `hotfix`
image::images/basic-branching-5.png[`master` wurde vorgespult zu `hotfix`.]

Nachdem Ihre überaus wichtige Fehlerbehebung bereitgestellt wurde, können Sie sich wieder dem zuwenden, woran Sie gerade arbeiteten, als Sie unterbrochen wurden.
Zunächst werden Sie jedoch den `hotfix`-Branch löschen, weil Sie diesen nicht länger benötigen - schließlich verweist der `master`-Branch auf den selben Entwicklungsstand.
Sie können ihn löschen, in dem Sie die Anweisung `git branch` mit der Option `-d` ausführen:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Jetzt können Sie zu dem Branch zurückwechseln, auf dem Sie mit Ihren Arbeiten an Sachverhalt #53 begonnen haben, und daran weiter arbeiten.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Weitergeführte Arbeiten an `iss53`
image::images/basic-branching-6.png[Weitergeführte Arbeiten an `iss53`.]

An dieser Stelle ist anzumerken, dass die Änderung, welche Sie auf Ihrem `hotfix`-Branch vorgenommen haben, nicht in den Dateien Ihres `iss53`-Branches enthalten ist.
Wenn Sie diese einfließen lassen müssen, können Sie Ihren `master`-Branch mit der Anweisung `git merge master` mit Ihrem `iss53`-Branch zusammenführen, oder Sie können damit warten, diese Änderungen zu integrieren, bis Sie entscheiden, den `iss53`-Branch später in den `master`-Branch zurückzuführen.

[[_basic_merging]]
==== Grundlagen des Zusammenführens

(((branches, merging)))(((merging)))
Angenommen, Sie haben entschieden, dass Ihre Arbeiten an Sachverhalt #53 abgeschlossen sind und das Ganze soweit ist, dass es mit dem `master` Branch zusammengeführt werden kann.
Um das zu tun, werden Sie Ihren `iss53`-Branch in den `master`-Branch einfließen lassen, genauso wie Sie es zuvor mit dem `hotfix`-Branch getan haben.
Sie müssen nur mit der Anweisung `checkout` zum dem Branch zu wechseln, in welchen Sie etwas einfließen lassen wollen und dann die Anweisung `git merge` ausführen:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

Das sieht ein bisschen anders aus, als das Zusammenführen mit dem `hotfix`-Branch, dass Sie zuvor gemacht haben.
Die Entwicklungsstränge haben sich in diesem Fall schon zu einem früheren Zeitpunkt geteilt.
Da der `commit` auf dem Branch, auf dem Sie sich befinden, kein direkter Vorgänger von dem Branch ist, in den Sie etwas einfließem lassen wollen, hat Git einiges zu tun.
In diesem Fall führt Git ein einfaches 3-Wege-`merge` durch, wobei es die beiden Schnappschüsse verwendet, auf welche die Enden der Branches zeigen, und den gemeinsamen Vorgänger dieser beiden.

.Drei Schnappschüsse, die bei einem typischen `merge` benutzt werden.
image::images/basic-merging-1.png[Drei Schnappschüsse, die bei einem typischen `merge` benutzt werden.]

Anstatt einfach den Zeiger des Branches vorwärts zu bewegen, erstellt Git einen neuen Schnappschuss, der aus dem 3-Wege-`merge` resultiert und erzeugt automatisch einen neuen `commit`, der darauf zeigt.
Dieser wird auch als `merge commit` bezeichnet und ist ein Spezialfall, weil er mehr als nur einen Elternteil hat.

.Ein `merge commit`
image::images/basic-merging-2.png[Ein `merge commit`.]

Es ist wichtig herauszustellen, dass Git den besten gemeinsamen Vorgänger als Grundlage für das Zusammenführen bestimmt, denn hierin unterscheidet es sich von älteren Werkzeugen wie CVS oder Subversion (vor Version 1.5), wo der Entwickler beim Zusammenführen die `merge`-Basis selbst ermitteln musste.
In Git ist das Zusammenführen dadurch wesentlich einfacher, als in diesen anderen Systemen.

Da Ihre Änderungen jetzt eingeflossen sind, haben Sie keinen weiteren Bedarf mehr für den `iss53`-Branch.
Sie können das Ticket in Ihrem Ticket-Tracking-System schließen und den Branch löschen:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== Grundlegende Konflikte bei Zusammenführen

(((merging, conflicts)))
Gelegentlich verläuft der Prozess nicht ganz so reibungslos.
Wenn Sie in den beiden Branches, die Sie zusammenführen wollen, an der selben Stelle in der selben Datei unterschiedliche Änderungen vorgenommen haben, wird Git nicht in der Lage sein, diese sauber zusammenzuführen.
Wenn Ihre Änderungen bezüglich Sachverhalt #53 die selbe Stelle in einer Datei betreffen wie beim `hotfix`-Branch, werden Sie einen `merge`-Konflikt bekommen, der ungefähr so aussehen könnte:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Git hat nicht automatisch einen neuen 'merge commit' erstellt.
Es hat den Prozess angehalten, solange Sie den Konflikt beseitigen.
Wenn Sie zu einem beliebigen Zeitpunkt nach einem `merge`-Konflikt sehen wollen, welche Dateien nicht zusammengeführt werden konnten (den Status `unmerged` haben), können Sie die Anweisung `git status` ausführen:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Alles, was `merge`-Konflikte aufweist und nicht gelöst wurde, wird als `unmerged` aufgeführt.
Git fügt den betroffenen Dateien Standardmarkierungen zur Konfliktlösung hinzu, so können Sie diese Dateien öffnen und diese Konflikte manuell lösen .
Ihre Datei enthält einen Abschnitt, der ungefährt so aussieht:

[source,html]
----
<div id="footer">
 Bitte kontaktieren Sie uns unter support@github.com
</div>
----

Das heißt, die Version in `HEAD` (Ihres `master`-Branches, denn der wurde per `checkout` aktiviert, als Sie das `merge` gemacht haben) ist der obere Teil des Blocks (alles oberhalb von '======='), und die Version aus dem `iss53`-Branch sieht wie der darunter befindliche Teil aus.
Um den Konflikt zu lösen, müssen Sie sich entweder für einen der beiden Teile entscheiden oder Sie führen die Inhalte selbst zusammen.
Sie könnten diesen Konflikt lösen, indem Sie den kompletten Block zum Beispiel damit ersetzen:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

Diese Lösung hat von beiden Teilen etwas und die Zeilen mit `<<<<<<<`, `=======`, und `>>>>>>>` wurden vollständig entfernt.
Nachdem Sie alle problematischen Bereiche in allen von dem Konflikt betroffenen Dateien beseitigt haben, führen Sie einfach die Anweisung `git add` für alle betroffenen Dateien aus, um sie als gelöst zu markieren.
Dieses 'staging' der Dateien markiert sie für Git als bereinigt.

Wenn Sie ein grafisches Tool benutzen möchten, um die Probleme zu lösen, dann können Sie `git mergetool` verwenden, welches ein passendes grafisches `merge`-Tool startet und Sie durch die Konfliktbereiche führt:(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

Wenn Sie ein anderes `merge`-Tool anstelle des Standardwerkzeugs verwenden möchten (Git wählte in diesem Fall `opendiff`, da die Anweisung auf einem Mac ausgeführt wurde), dann können Sie alle unterstützten Werkzeuge oben – unter ``one of the following tools'' – aufgelistet sehen.
Tippen Sie einfach den Namen Ihres gewünschten Werkzeugs ein.

[NOTE]
====
Wenn Sie anspruchsvollere Werkzeuge zur Lösung komplizierter `merge`-Konflikte benötigen, wir beschäftigen uns ausführlicher mit dem Zusammenführen in <<_advanced_merging>>.
====

Nachdem Sie das `merge`-Werkzeug beendet haben, werden Sie von Git gefragt, ob das Zusammenführen erfolgreich war.
Wenn Sie dem Skript ausrichten, dass es das war, fügt es die Datei zum Index hinzu, um diese für Sie als gelöst zu markieren.
Sie können die Anweisung `git status` erneut ausführen, um zu prüfen, dass alle Konflikte gelöst wurden:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

Wenn Sie damit zufrieden sind und Sie geprüft haben, dass alles, was Konflikte aufwies, zum Index hinzugefügt wurde, können Sie die Anweisung `git commit` ausführen, um den `merge commit` abzuschließen.
Die standardmäßige Commit-Nachricht sieht ungefähr so aus:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

Sie können dieser Commit-Nachricht noch Details darüber hinzufügen, wie Sie das Zusammenführen gelöst haben, wenn Sie denken, es könnte für künftige Betrachter dieses Commits hilfreich sein zu erklären, warum Sie getan haben, was Sie getan haben, falls es nicht offensichtlich ist.