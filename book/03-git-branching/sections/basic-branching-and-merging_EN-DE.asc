=== Basic Branching and Merging
=== Grundlagen des Verzweigens und Zusammenführens

Let's go through a simple example of branching and merging with a workflow that you might use in the real world.
You'll follow these steps:

Lassen Sie uns ein einfaches Beispiel für das Verzweigen und Zusammenführen durchgehen, wie es Ihnen bei einem Arbeitsablauf in der realen Welt begegnen könnte.
Sie werden diesen Schritten folgen:

. Do work on a web site.
. Create a branch for a new story you're working on.
. Do some work in that branch.

. Erledigen von Arbeiten an einer Website.
. Erzeugen eines Branches für eine neue Geschichte, an der Sie gerade arbeiten.
. Durchführen einiger Arbeiten innerhalb des Branches.

At this stage, you'll receive a call that another issue is critical and you need a hotfix.
You'll do the following:

Zu diesem Zeitpunkt erhalten Sie einen Anruf, dass ein anderer Sachverhalt kritisch ist und Sie den Fehler schnell beheben müssen.
Sie werden Folgendes tun:

. Switch to your production branch.
. Create a branch to add the hotfix.
. After it's tested, merge the hotfix branch, and push to production.
. Switch back to your original story and continue working.

. Wechseln Sie zu Ihrem Produktionsbranch.
. Legen Sie einen neuen Branch an, um den Fehler zu beheben.
. Nachdem dies gestestet wurde, integrieren Sie den Fehlerbehungsbranch und laden das Ganze in die Produktionsumgebung hoch.
. Wechseln Sie zurück zu Ihrer ursprünglichen Geschichte und arbeiten Sie weiter daran.

[[_basic_branching]]
==== Basic Branching
==== Grundlagen des Verzweigens

(((branches, basic workflow)))
First, let's say you're working on your project and have a couple of commits already.

(((branches, basic workflow)))
Lassen Sie uns zunächst annehmen, Sie arbeiten an Ihrem Projekt und haben bereits ein paar Commits gemacht.

.A simple commit history
image::images/basic-branching-1.png[A simple commit history.]

.Ein einfacher Commit-Verlauf
image::images/basic-branching-1.png[Ein einfacher Commit-Verlauf.]

You've decided that you're going to work on issue #53 in whatever issue-tracking system your company uses.
To create a branch and switch to it at the same time, you can run the `git checkout` command with the `-b` switch:

Sie haben sich dafür entschieden, an Sachverhalt #53 zu arbeiten in irgendeinem Fehlerverfolgunssystem, dass Ihre Firma benutzt.
Um einen neuen Branch anzulegen und gleichzeitig zu diesem zu wechseln, können Sie die Anweisung `git checkout` zusammen mit der Option `-b` ausführen:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

This is shorthand for:

Das ist die Kurzversion von:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Creating a new branch pointer
image::images/basic-branching-2.png[Creating a new branch pointer.]

.Erzeugen eines neuen Branch-Zeigers
image::images/basic-branching-2.png[Erzeugen eines neuen Branch-Zeigers.]

You work on your web site and do some commits.
Doing so moves the `iss53` branch forward, because you have it checked out (that is, your `HEAD` is pointing to it):

Sie arbeiten an Ihrer Website und führen einige Commits durch.
Wenn Sie das machen, bewegt das den `iss53`-Branch vorwärts, weil Sie ihn ausgecheckt haben (das bedeutet, Ihr `HEAD` zeigt auf diesen Branch):

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

.The iss53 branch has moved forward with your work
image::images/basic-branching-3.png[The iss53 branch has moved forward with your work.]

.Der iss53-Branch hat sich mit Ihrer Arbeit vorwärts bewegt
image::images/basic-branching-3.png[Der iss53-Branch hat sich mit Ihrer Arbeit vorwärts bewegt.]

Now you get the call that there is an issue with the web site, and you need to fix it immediately.
With Git, you don't have to deploy your fix along with the `iss53` changes you've made, and you don't have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production.
All you have to do is switch back to your `master` branch.

Jetzt bekommen Sie den Anruf, dass es ein Problem mit der Website gibt und Sie es umgehend beheben müssen.
Bei Git müssen Sie nicht die Fehlerbehebung zusammen mit den Änderungen bereitstellen, die Sie bereits an `iss53` vorgenommen haben, und Sie müssen auch keinen großen Aufwand damit betreiben, diese Änderungen rückgängig zu machen, bevor Sie daran arbeiten können, Ihre Fehlerbehebung auf das anzuwenden, was sich in der Produktionsumgebung befindet.
Alles, was Sie machen müssen, ist, zu Ihrem `master`-Branch zurück zu wechseln.

However, before you do that, note that if your working directory or staging area has uncommitted changes that conflict with the branch you're checking out, Git won't let you switch branches.
It's best to have a clean working state when you switch branches.
There are ways to get around this (namely, stashing and commit amending) that we'll cover later on, in <<_git_stashing>>.
For now, let's assume you've committed all your changes, so you can switch back to your master branch:

Bevor Sie das tun, beachten Sie jedoch, dass Git Sie nicht die Branches wechseln lassen wird, wenn in Ihrem Arbeitsverzeichnis oder Ihrem Index Änderungen existieren, welche Konflikte mit dem Branch erzeugen können, den Sie gerade auschecken.
Am besten ist es, einen sauberen Arbeitszustand zu haben, wenn Sie die Branches wechseln.
Es gibt Möglichkeiten, dies zu umzugehen (namentlich sogenanntes Stashing und das Abändern von Commits), was wir später in <<_git_stashing>> behandeln.
Lassen Sie uns vorerst annehmen, Sie haben für alle Ihre Änderungen Commits durchgeführt, sodass Sie zu Ihrem `master`-Branch zurück wechseln können.

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

At this point, your project working directory is exactly the way it was before you started working on issue #53, and you can concentrate on your hotfix.
This is an important point to remember: when you switch branches, Git resets your working directory to look like it did the last time you committed on that branch.
It adds, removes, and modifies files automatically to make sure your working copy is what the branch looked like on your last commit to it.

Zu diesem Zeitpunkt befindet sich das Arbeitsverzeichnis des Projektes in exakt dem gleichen Zustand, in dem es sich befand, bevor Sie mit der Arbeit an Sachverhalt #53 begonnen haben und Sie können sich direkt auf die Fehlerbehebung konzentrieren.
Dabei sollte man diesen wichtigen Punkt bedenken: wenn Sie die Branches wechseln, setzt Git Ihr Arbeitsverzeichnis zurück, um genauso auszusehen, wie zu dem Zeitpunkt, als Sie den letzten Commit auf diesem Branch durchgeführt haben.
Dateien werden automatisch hinzugefügt, entfernt und verändert, um sicherzustellen, dass Ihre Arbeitskopie auf dem selben Stand ist wie zum Zeitpunkt Ihres letzten Commits auf diesem Branch.

Next, you have a hotfix to make.
Let's create a hotfix branch on which to work until it's completed:

Als Nächstes müssen Sie sich um die Fehlerbehebung kümmern.
Lassen Sie uns einen Branch namens ``hotfix'' erstellen, an dem Sie bis zu dessen Fertigstellung arbeiten.

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

.Hotfix branch based on `master`
image::images/basic-branching-4.png[Hotfix branch based on `master`.]

.Auf `master`-Branch basierender Hotfix-Branch 
image::images/basic-branching-4.png[Auf `master`-Branch basierender Hotfix-Branch.]

You can run your tests, make sure the hotfix is what you want, and merge it back into your master branch to deploy to production.
You do this with the `git merge` command:(((git commands, merge)))

Sie können Ihre Tests durchführen und sicherstellen, dass der Hotfix seinen Zweck erfüllt und ihn dann mit dem master-Branch zusammenführen, um ihn in die Produktionsumgebung zu integrieren.
Das machen Sie mit der Anweisung `git merge`:(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

You'll notice the phrase ``fast-forward'' in that merge.
Because the commit pointed to by the branch you merged in was directly upstream of the commit you're on, Git simply moves the pointer forward.
To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit's history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together – this is called a ``fast-forward.''

Ihnen wird bei diesem Zusammenführen der Ausdruck ``fast-forward'' auffallen.
Da der Commit, auf den der Branch zeigte, den Sie integriert haben, unmittelbar von dem letzten Commit abstammt, auf dem Sie sich befinden, bewegt Git den Zeiger einfach weiter.
Um es anders auszudrücken, wenn Sie versuchen, einen Commit mit einem anderen Commit zu verschmelzen, welcher erreicht werden kann, in dem man einfach dem Commit-Verlauf des ersteren Commits folgt, dann vereinfacht Git die Dinge durch Vorwärtsbewegen des Zeigers, weil es sich hier nicht um auseinanderlaufende Entwicklungsstränge handelt, die miteinander zu verschmelzen sind - dies wird ``fast-forward'' genannt.

Your change is now in the snapshot of the commit pointed to by the `master` branch, and you can deploy the fix.

Ihre Änderung befindet sich nun im Schnappschuss des Commits, auf den der `master`-Branch zeigt und Sie können Ihre Fehlerbehebung anwenden.

.`master` is fast-forwarded to `hotfix`
image::images/basic-branching-5.png[`master` is fast-forwarded to `hotfix`.]

.`master` wurde vorgespult zu `hotfix`
image::images/basic-branching-5.png[`master` wurde vorgespult zu `hotfix`.]

After your super-important fix is deployed, you're ready to switch back to the work you were doing before you were interrupted.
However, first you'll delete the `hotfix` branch, because you no longer need it – the `master` branch points at the same place.
You can delete it with the `-d` option to `git branch`:

Nachdem Ihre überaus wichtige Fehlerbehebung bereitgestellt wurde, können Sie sich wieder dem zuwenden, woran Sie gerade arbeiteten, als Sie unterbrochen wurden.
Zunächst werden Sie jedoch den `hotfix`-Branch löschen, weil Sie diesen nicht länger benötigen - schließlich verweist der `master`-Branch auf den selben Entwicklungsstand.
Sie können ihn löschen, in dem Sie die Anweisung `git branch` mit der Option `-d` ausführen:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.

Jetzt können Sie zu dem Branch zurückwechseln, auf dem Sie mit Ihren Arbeiten an Sachverhalt #53 begonnen haben, und daran weiter arbeiten.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Work continues on `iss53`
image::images/basic-branching-6.png[Work continues on `iss53`.]

.Weitergeführte Arbeiten an `iss53`
image::images/basic-branching-6.png[Weitergeführte Arbeiten an `iss53`.]

It's worth noting here that the work you did in your `hotfix` branch is not contained in the files in your `iss53` branch.
If you need to pull it in, you can merge your `master` branch into your `iss53` branch by running `git merge master`, or you can wait to integrate those changes until you decide to pull the `iss53` branch back into `master` later.

An dieser Stelle ist anzumerken, dass die Änderung, welche Sie auf Ihrem `hotfix`-Branch vorgenommen haben, nicht in den Dateien Ihres `iss53`-Branches enthalten ist.
Wenn Sie diese einfließen lassen müssen, können Sie Ihren `master`-Branch mit der Anweisung `git merge master` mit Ihrem `iss53`-Branch zusammenführen, oder Sie können damit warten, diese Änderungen zu integrieren, bis Sie entscheiden, den `iss53`-Branch später in den `master`-Branch zurückzuführen.

[[_basic_merging]]
==== Basic Merging
==== Grundlagen des Zusammenführens

(((branches, merging)))(((merging)))
Suppose you've decided that your issue #53 work is complete and ready to be merged into your `master` branch.
In order to do that, you'll merge in your `iss53` branch, much like you merged in your `hotfix` branch earlier.
All you have to do is check out the branch you wish to merge into and then run the `git merge` command:

Angenommen, Sie haben entschieden, dass Ihre Arbeiten an Sachverhalt #53 abgeschlossen sind und das Ganze soweit ist, dass es mit dem `master` Branch zusammengeführt werden kann.
Um das zu tun, werden Sie Ihren `iss53`-Branch in den `master`-Branch einfließen lassen, genauso wie Sie es zuvor mit dem `hotfix`-Branch getan haben.
Sie müssen nur mit der Anweisung `checkout` zum dem Branch zu wechseln, in welchen Sie etwas einfließen lassen wollen und dann die Anweisung `git merge` ausführen:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

This looks a bit different than the `hotfix` merge you did earlier.
In this case, your development history has diverged from some older point.
Because the commit on the branch you're on isn't a direct ancestor of the branch you're merging in, Git has to do some work.
In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.

Das sieht ein bisschen anders aus, als das Zusammenführen mit dem `hotfix`-Branch, dass Sie zuvor gemacht haben.
Die Entwicklungsstränge haben sich in diesem Fall schon zu einem früheren Zeitpunkt geteilt.
Da der `commit` auf dem Branch, auf dem Sie sich befinden, kein direkter Vorgänger von dem Branch ist, in den Sie etwas einfließem lassen wollen, hat Git einiges zu tun.
In diesem Fall führt Git ein einfaches 3-Wege-`merge` durch, wobei es die beiden Schnappschüsse verwendet, auf welche die Enden der Branches zeigen, und den gemeinsamen Vorgänger dieser beiden.

.Three snapshots used in a typical merge
image::images/basic-merging-1.png[Three snapshots used in a typical merge.]

.Drei Schnappschüsse, die bei einem typischen `merge` benutzt werden.
image::images/basic-merging-1.png[Drei Schnappschüsse, die bei einem typischen `merge` benutzt werden.]

Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.
This is referred to as a merge commit, and is special in that it has more than one parent.

Anstatt einfach den Zeiger des Branches vorwärts zu bewegen, erstellt Git einen neuen Schnappschuss, der aus dem 3-Wege-`merge` resultiert und erzeugt automatisch einen neuen `commit`, der darauf zeigt.
Dieser wird auch als `merge commit` bezeichnet und ist ein Spezialfall, weil er mehr als nur einen Elternteil hat.

.A merge commit
image::images/basic-merging-2.png[A merge commit.]

.Ein `merge commit`
image::images/basic-merging-2.png[Ein `merge commit`.]

It's worth pointing out that Git determines the best common ancestor to use for its merge base; this is different than older tools like CVS or Subversion (before version 1.5), where the developer doing the merge had to figure out the best merge base for themselves.
This makes merging a heck of a lot easier in Git than in these other systems.

Es ist wichtig herauszustellen, dass Git den am besten geeigneten gemeinsamen Vorgänger als Grundlage für das Zusammenführen bestimmt, denn hierin unterscheidet es sich von älteren Werkzeugen wie CVS oder Subversion (vor Version 1.5), wo der Entwickler beim Zusammenführen die `merge`-Basis selbst ermitteln musste.
In Git ist das Zusammenführen dadurch wesentlich einfacher, als in diesen anderen Systemen.

Now that your work is merged in, you have no further need for the `iss53` branch.

Da Ihre Änderungen jetzt eingeflossen sind, haben Sie keinen weiteren Bedarf mehr für den `iss53`-Branch.

You can close the ticket in your ticket-tracking system, and delete the branch:

Sie können das Ticket in Ihrem Ticket-Tracking-System schließen und den Branch löschen:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== Basic Merge Conflicts
==== Grundlegende Konflikte bei Zusammenführen

(((merging, conflicts)))
Occasionally, this process doesn't go smoothly.
If you changed the same part of the same file differently in the two branches you're merging together, Git won't be able to merge them cleanly.
If your fix for issue #53 modified the same part of a file as the `hotfix`, you'll get a merge conflict that looks something like this:

Gelegentlich verläuft der Prozess nicht ganz so reibungslos.
Wenn Sie in den beiden Branches, die Sie zusammenführen wollen, an der selben Stelle in der selben Datei unterschiedliche Änderungen vorgenommen haben, wird Git nicht in der Lage sein, diese sauber zusammenzuführen.
Wenn Ihre Änderungen bezüglich Sachverhalt #53 die selbe Stelle in einer Datei betreffen wie beim `hotfix`-Branch, werden Sie einen `merge`-Konflikt bekommen, der ungefähr so aussehen könnte:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Git hasn't automatically created a new merge commit.
It has paused the process while you resolve the conflict.
If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:

Git hat nicht automatisch einen neuen 'merge commit' erstellt.
Es hat den Prozess angehalten, solange Sie den Konflikt beseitigen.
Wenn Sie zu einem beliebigen Zeitpunkt nach einem `merge`-Konflikt sehen wollen, welche Dateien nicht zusammengeführt werden konnten (den Status `unmerged` haben), können Sie die Anweisung `git status` ausführen:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Anything that has merge conflicts and hasn't been resolved is listed as unmerged.
Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.
Your file contains a section that looks something like this:

Alles, was `merge`-Konflikte aufweist und nicht gelöst wurde, wird als `unmerged` aufgeführt.
Git fügt den betroffenen Dateien Standardmarkierungen zur Konfliktlösung hinzu, so können Sie diese Dateien öffnen und diese Konflikte manuell lösen .
Ihre Datei enthält einen Abschnitt, der ungefährt so aussieht:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.
In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.
For instance, you might resolve this conflict by replacing the entire block with this:

Das heißt, die Version in `HEAD` (Ihres `master`-Branches, denn der wurde per `checkout` aktiviert, als Sie das `merge` gemacht haben) ist der obere Teil des Blocks (alles oberhalb von '======='), und die Version aus dem `iss53`-Branch sieht wie der darunter befindliche Teil aus.
Um den Konflikt zu lösen, müssen Sie sich entweder für einen der beiden Teile entscheiden oder Sie führen die Inhalte selbst zusammen.
Sie könnten diesen Konflikt lösen, indem Sie den kompletten Block zum Beispiel damit ersetzen:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

This resolution has a little of each section, and the `<<<<<<<`, `=======`, and `>>>>>>>` lines have been completely removed.
After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.
Staging the file marks it as resolved in Git.

Diese Lösung hat von beiden Teilen etwas und die Zeilen mit `<<<<<<<`, `=======`, und `>>>>>>>` wurden vollständig entfernt.
Nachdem Sie alle problematischen Bereiche in allen von dem Konflikt betroffenen Dateien beseitigt haben, führen Sie einfach die Anweisung `git add` für alle betroffenen Dateien aus, um sie als gelöst zu markieren.
Dieses 'staging' der Dateien markiert sie für Git als bereinigt.

If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))

Wenn Sie ein grafisches Tool benutzen möchten, um die Probleme zu lösen, dann können Sie `git mergetool` verwenden, welches ein passendes grafisches `merge`-Tool startet und Sie durch die Konfliktbereiche führt:(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on a Mac), you can see all the supported tools listed at the top after ``one of the following tools.''
Just type the name of the tool you'd rather use.

Wenn Sie ein anderes `merge`-Tool anstelle des Standardwerkzeugs verwenden möchten (Git wählte in diesem Fall `opendiff`, da die Anweisung auf einem Mac ausgeführt wurde), dann können Sie alle unterstützten Werkzeuge oben – unter ``one of the following tools'' – aufgelistet sehen.
Tippen Sie einfach den Namen Ihres gewünschten Werkzeugs ein.

[NOTE]
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<_advanced_merging>>.
====

[NOTE]
====
Wenn Sie anspruchsvollere Werkzeuge zur Lösung komplizierter `merge`-Konflikte benötigen, wir beschäftigen uns ausführlicher mit dem Zusammenführen in <<_advanced_merging>>.
====

After you exit the merge tool, Git asks you if the merge was successful.
If you tell the script that it was, it stages the file to mark it as resolved for you.
You can run `git status` again to verify that all conflicts have been resolved:

Nachdem Sie das `merge`-Werkzeug beendet haben, werden Sie von Git gefragt, ob das Zusammenführen erfolgreich war.
Wenn Sie dem Skript ausrichten, dass es das war, fügt es die Datei zum Index hinzu, um diese für Sie als gelöst zu markieren.
Sie können die Anweisung `git status` erneut ausführen, um zu prüfen, dass alle Konflikte gelöst wurden:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.
The commit message by default looks something like this:

Wenn Sie damit zufrieden sind und Sie geprüft haben, dass alles, was Konflikte aufwies, zum Index hinzugefügt wurde, können Sie die Anweisung `git commit` ausführen, um den `merge commit` abzuschließen.
Die standardmäßige Commit-Nachricht sieht ungefähr so aus:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

You can modify that message with details about how you resolved the merge if you think it would be helpful to others looking at this merge in the future – why you did what you did, if it's not obvious.

Sie können dieser Commit-Nachricht noch Details darüber hinzufügen, wie Sie das Zusammenführen gelöst haben, wenn Sie denken, es könnte für künftige Betrachter dieses Commits hilfreich sein zu erklären, warum Sie getan haben, was Sie getan haben, falls es nicht offensichtlich ist.