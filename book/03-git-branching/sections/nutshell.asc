[[_git_branches_overview]]
=== Branches in aller Kürze

Um richtig zu verstehen, wie Git das Verzweigen realisiert, müssen wir einen Schritt zurückgehen und untersuchen, wie Git seine Daten speichert.

Wie Sie vielleicht von <<_getting_started>> in Erinnerung haben, speichert Git seine Daten nicht als Serie von Änderungen oder Unterschieden, sondern statt dessen als eine Reihe von Momentaufnahmen.

When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.
This object also contains the author's name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.

Wenn Sie einen Commit anlegen, dann speichert Git ein `commit`-Objekt, welches einen Zeiger zu der Momentaufnahme der Inhalte enthält, welche sich in der Staging Area bzw. im Index befinden.
Dieses Objekt beinhaltet den Namen und die E-Mail-Adresse des Autors, die Nachricht, die Sie eingegeben haben, und Zeiger zu dem Commit oder den Commits, welche direkt vor diesem Commit gemacht wurden (zu seinem Vorgänger bzw. seinen Vorgängern): keine Vorgänger für den ersten Commit, einen Vorgänger für einen normalen Commit und mehrere Vorgänger für einen Commit, welche aus dem Zusammenführen von zwei oder mehr Branches resultiert.

Um das zu veranschaulichen, lassen Sie uns annehmen, Sie haben ein Verzeichnis, welches drei Dateien enthält, und Sie fügen alle Dateien zur Staging-Area hinzu und führen einen Commit durch.
Durch das Hinzufügen der Dateien zur Staging Area erzeugt Git für jede Datei eine Prüfsumme (den SHA-1-Hashwert, den wir in <<_getting_started>> erwähnt haben), speichert diese Version der Datei im Git-Repository (Git verweist auf diese als Blobs) und fügt die Prüfsumme der Staging-Area hinzu:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'initial commit of my project'
----

Wenn Sie mit der Anweisung `git commit` einen Commit erzeugen, berechnet Git für jedes Unterverzeichnis (in diesem Fall nur das Wurzelverzeichnis des Projektes) eine Prüfsumme und speichert diese als `tree`-Objekte im Git-Repository.
Git erzeugt dann ein `commit`-Objekt, welches die Metadaten und einen Zeiger zum `tree`-Objekt des Wurzelverzeichnisses enthält, sodass es bei Bedarf die Momentaufnahme erneut erzeugen kann.(((git commands, commit)))

Ihr Git-Repository enthält jetzt fünf Objekte: je einen Blob für die Inhalte von jeder Ihrer drei Dateien, ein `tree`-Objekt, welches den Inhalt des Verzeichnisses auflistet und angibt, welcher Dateiname zu welchem Blob gehört, und ein `commit`-Objekt mit dem Zeiger, der auf die Wurzel des Projektbaumes und die Metadaten des Commits verweist.

.Ein Commit und sein Tree
image::images/commit-and-tree.png[Ein Commit und sein Tree.]

Wenn Sie einige Änderungen vornehmen und wieder einen Commit durchführen, speichert dieser einen Zeiger zu dem Commit, der unmittelbar davor gemacht wurde.

.Commits und ihre Vorgänger
image::images/commits-and-parents.png[Commits und ihre Vorgänger.]

Ein Branch ist bei Git einfach ein leichtgewichtiger beweglicher Zeiger zu einem von diesen Commits.
Die Standardbezeichnung für einen Branch bei Git lautet `master`.
Wenn Sie damit beginnen, Commits durchzuführen, erhalten Sie einen `master`-Branch, der auf den letzten Commit zeigt, den Sie gemacht haben.
Jedes Mal, wenn Sie einen Commit durchführen, bewegt er sich automatisch vorwärts.

[NOTE]
====
Der ``master''-Branch in Git ist kein spezieller Branch.(((master)))
Er ist genau wie jeder andere Branch.
Der einzige Grund dafür, dass nahezu jedes Repository einen ``master''-Branch hat, ist der Umstand, dass die Anweisung `git init` diesen standardmäßig erzeugt und die meisten Leute sich nicht darum kümmern, den Namen zu ändern.
====

.Ein Branch und sein Commit-Verlauf
image::images/branch-and-history.png[Ein Branch und sein Commit-Verlauf.]

[[_create_new_branch]]
==== Erzeugen eines neuen Branches

(((branches, creating)))
Was passiert, wenn Sie einen neuen Branch erzeugen?
Nun, dabei wird ein neuer Zeiger für Sie erzeugt.
Sagen wir, Sie erzeugen einen neuen Branch mit dem Namen ``testing''.
Das machen Sie mit der Anweisung `git branch`:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

Dies erzeugt einen neuen Zeiger, der auf den selben Commit zeigt, auf dem Sie sich gegenwärtig befinden.

.Zwei Branches, die auf die selbe Serie von Commits zeigen
image::images/two-branches.png[Zwei Branches, die auf die selbe Serie von Commits zeigen.]

Woher weiß Git, auf welchem Branch Sie gegenwärtig sind?
Es besitzt einen speziellen Zeiger namens `HEAD`.
Beachten Sie, dass dieser `HEAD` sich sehr stark unterscheidet von den `HEAD`-Konzepten anderer Versionsverwaltungen, mit denen Sie vielleicht vertraut sind, wie Subversion oder CVS.
Bei Git handelt es sich bei `HEAD` um einen Zeiger auf den lokalen Branch, auf dem Sie sich gegenwärtig befinden.
In diesem Fall sind Sie noch auf dem `master`-Branch.
Die Anweisung `git branch` hat den neuen Branch nur _erzeugt_, aber nicht zu diesem gewechselt.

.Auf einen Branch zeigender HEAD
image::images/head-to-master.png[Auf einen Branch zeigender HEAD.]

Sie können dies ganz einfach sehen, indem Sie eine einfache `git log`-Anweisung ausführen, welche Ihnen zeigt, wohin die Zeiger der Branches zeigen. Diese Option hat den Namen `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----

Sie können die ``master''- und ``testing''-Branches sehen, welche dort direkt neben dem Commit `f30ab` sind.

[[_switching_branches]]
==== Wechseln der Branches

(((branches, switching)))
Um zu einem existierenden Branch zu wechseln, führen Sie die Anweisung `git checkout` aus.(((git commands, checkout)))
Lassen Sie uns zu dem neuen `testing`-Branch wechseln.

[source,console]
----
$ git checkout testing
----

Dies bewegt `HEAD` dazu, auf den `testing`-Branch zu zeigen.

.HEAD zeigt auf den aktuellen Branch
image::images/head-to-testing.png[HEAD zeigt auf den aktuellen Branch.]

Was bedeutet das?
Nun, lassen Sie und einen weiteren Commit durchführen.

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.Der Branch, auf den HEAD zeigt, bewegt sich vorwärts, wenn ein Commit gemacht wird
image::images/advance-testing.png[Der Branch, auf den HEAD zeigt, bewegt sich vorwärts, wenn ein Commit gemacht wird.]

Das ist interessant, weil sich jetzt Ihr `testing`-Branch vorwärts bewegt hat, aber Ihr `master`-Branch noch auf den Commit zeigt, auf dem Sie sich befanden, als Sie die Anweisung `git checkout` ausführten, um die Branches zu wechseln.
Lassen Sie uns zurückwechseln zum `master`-Branch.

[source,console]
----
$ git checkout master
----

.HEAD bewegt sich, wenn Sie auschecken
image::images/checkout-master.png[HEAD bewegt sich, wenn Sie auschecken.]

Diese Anweisung hat zwei Dinge bewirkt.
Sie hat den Zeiger `HEAD` zurückbewegt, um auf den `master`-Branch zu zeigen, und sie verwandelte die Dateien in Ihrem Arbeitsverzeichnis zurück in den Zustand zum Zeitpunkt der Momentaufnahme, auf welche der `master`-Branch zeigt.
Dies bedeutet auch, dass die Änderungen, die Sie von diesem Punkt aus vornehmen, von einer älteren Verion des Projekts abzweigen werden.
Sie macht im Grunde genommen die Änderungen rückgängig, die Sie auf Ihrem `testing`-Branch vorgenommen haben, sodass Sie in eine andere Richtung gehen können.

[NOTE]
.Wechseln der Branches ändert Dateien in Ihrem Arbeitsverzeichnis
====
Es ist wichtig zu beachten, dass sich die Dateien in Ihrem Arbeitsverzeichnis verändern, wenn Sie in Git die Branches wechseln.
Wenn Sie zu einem älteren Branch wechseln, wird Ihr Arbeitsverzeichnis zurückverwandelt, sodass es aussieht wie zu dem Zeitpunkt, als Sie Ihren letzten Commit auf diesem Branch durchgeführt haben.
Wenn Git das nicht problemlos durchführen kann, lässt es Sie die Branches überhaupt nicht wechseln.
====

Lassen Sie uns ein paar Änderungen vornehmen und noch einen Commit durchführen:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Jetzt hat sich Ihr Projektverlauf verzweigt (see <<divergent_history>>).
Sie erzeugten einen Branch und wechselten zu diesem, arbeiteten etwas daran, und dann wechselten Sie zurück zu Ihrem Hauptzweig und erledigten andere Arbeiten.
Beide Änderungen existieren getrennt voneinander in separaten Branches: Sie können zwischen den beiden Branches hin und her wechseln und diese zusammenführen, wenn Sie fertig sind.
Und das alles haben Sie mit einfachen `branch`-, `checkout`- und `commit`-Anweisungen gemacht.

[[divergent_history]]
.Verzweigter Verlauf
image::images/advance-master.png[Verzweigter Verlauf.]

Sie können sich dies auch mühelos ansehen, wenn Sie die Anweisung `git log` ausführen.
Wenn Sie die Anweisung `git log --oneline --decorate --graph --all`, wird Ihnen der Verlauf von Ihren Commits so angezeigt, dass erkennbar ist, wo Ihre Branch-Zeiger sich befinden und wie Ihr Verlauf sich verzweigt hat.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Da ein Branch in Git in Wirklichkeit eine einfache Datei ist, welche die 40 Zeichen lange SHA-1-Prüfsumme des Commits enthält, zu dem sie zeigt, können Branches ohne großen Aufwand erzeugt und vernichtet werden.
Einen neuen Branch anzulegen, geht so schnell und ist so einfach, wie 41 Bytes in eine Datei zu schreiben (40 Zeichen und ein Zeilenumbruch).

Dies steht in krassem Gegensatz zu der Art und Weise, wie die meisten älteren Werkzeuge zur Versionsverwaltung Branches anlegen, was das Kopieren aller Projektdateien in ein zweites Verzeichnis einschließt.
Das kann, in Abhängigkeit von der Projektgröße, mehrere Sekunden oder sogar Minuten dauern, während bei Git dieser Prozess augenlicklich erledigt ist.
Da wir außerdem immer die Vorgänger mit aufzeichnen, wenn wir einen Commit durchführen, wird automatisch die Suche nach einer geeigneten Basis für das Zusammenführen für uns erledigt, was dadurch in der Regel sehr einfach erledigt werden kann.
Diese Funktionen tragen dazu bei, die Entwickler zu ermutigen, häufig Branches zu erstellen und zu nutzen.

Lassen Sie uns sehen, warum Sie das tun sollten.
