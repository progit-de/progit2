[[_rebasing]]
=== Rebasing

(((rebasing)))
Es gibt bei Git zwei Wege, um Änderungen von einem Branch in einen anderen zu integrieren: `merge` und `rebase`.
In diesem Abschnitt werden Sie erfahren, was Rebasing ist, wie Sie es anwenden, warum es ein verdammt abgefahrenes Werkzeug ist und bei welchen Gelegenheiten Sie es besser nicht einsetzen sollten.

==== Das einfache Rebase

Wenn Sie sich noch mal ein früheres Beispiel aus <<_basic_merging>> anschauen, können Sie sehen, dass Sie Ihre Arbeit verzweigt und Commits auf zwei unterschiedlichen Branches erstellt haben.

.Einfacher verzweigter Verlauf
image::images/basic-rebase-1.png[Einfacher verzweigter Verlauf.]

Wie wir bereits besprochen haben, ist die einfachste Möglichkeit, Branches zusammenzuführen, die `merge`-Anweisung.
Sie führt einen Drei-Wege-Merge durch zwischen den beiden letzten Momentaufnahmen der Branches (`C3` und `C4`) und dem letzen gemeinsamen Vorgänger (C2) der beiden, wobei eine neue Momentaufnahme (und ein Commit) erzeugt wird.

.Zusammenführen (Merging) verzweigter Arbeitsverläufe
image::images/basic-rebase-2.png[Zusammenführen (Merging) verzweigter Arbeitsverläufe.]

Allerdings gibt es noch einen anderen Weg: Sie können den Patch der Änderungen, den wir in `C4` eingeführt haben, nehmen und an der Spitze von `C3` erneut anwenden.
Dieses Vorgehen nennt man in Git _rebasing_.
Mit der `rebase`-Anweisung können Sie alle Änderungen, die an einem Branch vorgenommen wurden, auf einen anderen Branch erneut anwenden.(((git commands, rebase)))

In diesem Beispiel würden Sie folgendes ausführen:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Dies funktioniert, indem Git zum letzten gemeinsamen Vorfahren der beiden Branches (der, auf dem Sie arbeiten, und jener, auf den Sie _rebasen_ möchten) geht, dann die Informationen zu den Änderungen (diffs) sammelt, welche seit dem bei jedem einzelen Commit des aktuellen Branches gemacht wurden, diese in temporären Dateien speichert, den aktuellen Branch auf den gleichen Commit setzt wie den Branch, auf den Sie _rebasen_ möchten und dann alle Änderungen erneut durchführt.

.Rebase der in `C4` eingeführten Änderung auf `C3`
image::images/basic-rebase-3.png[Rebasing der in `C4` eingeführten Änderung auf `C3`.]

An diesem Punkt können Sie zurück zum `master`-Branch wechseln und einen `fast-forward`-Merge durchführen.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Vorspulen des master-Branches
image::images/basic-rebase-4.png[Vorspulen des master-Branches.]

Nun ist die Momentaufnahme, auf die `C4'` zeigt, exakt die selbe wie diejenige, auf die `C5` in dem Merge-Beispiel gezeigt hat.
Es gibt keinen Unterschied im Resultat dieser Zusammenführung, aber durch Rebasing ensteht ein saubrerer Verlauf.
Wenn Sie das Protokoll des ``rebased''-Branches näher betrachten, sieht es aus wie ein linearer Verlauf: es scheint, als seien die ganzen Arbeiten der Reihe nach abgelaufen, auch wenn sie urprünglich parallel erfolgten.

Häufig werden Sie so verfahren um sicherzustellen, dass sich Ihre Commits sauber auf einen entfernten Branch anwenden lassen – möglicherweise in einem Projekt, an dem Sie sich beteiligen möchten, bei dem Sie aber nicht der Verantwortliche sind.
In diesem Fall würden Sie Ihre Arbeiten in einem Branch erledigen und im Anschluss Ihre Änderungen mittels Rebase zu `origin/master` hinzufügen, wenn Sie soweit sind, Ihre Patches dem Hauptprojekt zu übermitteln.
Auf diese Art und Weise hätte der Verantwortliche keinen Aufwand mit der Integration – nur ein ``fast-forward'' oder eine saubere Anwedung Ihres Patches.

Beachten Sie, dass die Momentaufnahme, auf welche der letzte Commit zeigt, ob es nun der letzte der Rebase-Commits nach einem Rebase oder der finale Merge-Commit nach einem Merge ist, die selbe Momentaufnahme ist, nur der Verlauf ist ein anderer.
Rebasing wiederholt die Änderungsschritte von einer Entwicklungslinie auf einer anderen in der Reihenfolge, in der sie entstanden sind, wohingegen beim Zusammenführen die beiden Endpunkte der Branches genommen und miteinander verschmolzen werden.

==== Interessantere Rebases

Sie können Ihr Rebase auch auf einen anderen Branch als den Rebase-Ziel-Branch anwenden.
Nehmen Sie zum Beispiel einen Verlauf wie in <<rbdiag_e>>.
Sie haben einen Themen-Branch (`server`) angelegt, um ein paar serverseitige Funktionalitäten zu Ihrem Projekt hinzuzufügen, und haben dann einen Commit gemacht.
Dann haben Sie von diesem einen weiteren Branch abgezweigt, um clientseitige Änderungen (`client`) vorzunehmen, und haben ein paar Commits durchgeführt.
Zum Schluss wechselten Sie wieder zurück zu Ihrem `server`-Branch und machten ein paar weitere Commits.

[[rbdiag_e]]
.Ein Verlauf mit einem Themen-Branch neben einem anderen Themen-Branch
image::images/interesting-rebase-1.png[Ein Verlauf mit einem Themen-Branch neben einem anderen Themen-Branch.]

Angenommen, Sie entscheiden sich, dass Sie für einen Release Ihre clientseitigen Änderungen mit Ihrer Hauptentwicklungslinie zusammenführen, während Sie die serverseitigen Änderungen noch zurückhalten wollen, bis diese weiter getestet wurden.
Sie können einfach die Änderungen am `client`-Branch (`C8` und `C9`), die nicht auf `server`-Branch sind, nehmen und mit der Anweisung `git rebase` zusammen mit der Option `--onto` erneut auf den `master`-Branch anwenden:

[source,console]
----
$ git rebase --onto master server client
----

Dies bedeutet im Wesentlichen, ``Checke den `client`-Branch aus, finde die Patches des gemeinsamen Vorgängers des `client`- und des `server`-Branches heraus und wende sie erneut auf den `master`-Branch an.''
Das ist ein wenig komplex, aber das Resultat ist ziemlich toll.

.Rebasing eines Themen-Branches außerhalb eines anderen Themen-Branches
image::images/interesting-rebase-2.png[Rebasing eines Themen-Branches außerhalb eines anderen Themen-Branches.]

Jetzt können Sie Ihren Master-Branch vorspulen (siehe <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Vorspulen Ihres master-Branches zum Einfügen der Änderungen des client-Branches
image::images/interesting-rebase-3.png[Vorspulen Ihres master-Branches zum Einfügen der Änderungen des client-Branches.]

Lassen Sie uns annehmen, Sie entscheiden sich dazu, Ihren `server`-Branch ebenfalls einzupflegen.
Sie können das Rebase des `server`-Branches auf den `master`-Branch anwenden, ohne diesen vorher auschecken zu müssen, indem Sie die Anweisung `git rebase [Basis-Branch] [Themen-Branch]` ausführen, welche für Sie den Themen-Branch auscheckt (in diesem Fall `server`) und ihn auf dem Basis-Branch (`master`) wiederholt:

[source,console]
----
$ git rebase master server
----

Dies wiederholt Ihre Änderungen vom `server`-Branch an der Spitze des `master`-Branches, wie in <<rbdiag_h>> abgebildet wird.

[[rbdiag_h]]
.Rebase Ihres server-Branches an der Spitze Ihres master-Branches
image::images/interesting-rebase-4.png[Rebase Ihres server-Branches an der Spitze Ihres master-Branches.]

Dann können Sie den Basis-Branch vorspulen (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Sie können die Branches `client`- und `server` entfernen, da die ganze Arbeit bereits integriert wurde und Sie diese nicht mehr benötigen. Und Ihr Verlauf für diesen gesamten Prozess sieht aus wie in <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Endgültiger Commit-Verlauf
image::images/interesting-rebase-5.png[Endgültiger Commit-Verlauf.]

[[_rebase_peril]]
==== Die Gefahren von Rebasing

(((rebasing, perils of)))
Ahh, aber der ganze Spaß mit dem Rebasing kommt nicht ohne seine Schattenseiten, welche in einer einzigen Zeile zusammengefasst werden können:

*Führen Sie kein Rebase mit Commits durch, die außerhalb Ihres Repositorys existieren.*

Wenn Sie dieser Richtlinie folgen, können Sie nichts falsch machen.
Wenn Sie es nicht tun, werden die Leute Sie hassen und Sie werden von Freunden und Verwandten verachtet.

Wenn Sie ein Rebase durchführen, heben Sie bestehende Commits auf und erstellen stattdessen neue, die zwar ähnlich aber dennoch unterschiedlich sind.
Wenn Sie Commits irgendwohin hochladen und andere ziehen sich diese herunter und nehmen sie als Grundlage für ihre Arbeit, dann müssen Ihre Mitstreiter ihre Arbeit jedesmal erneut zusammenführen, sobald Sie Ihre Commits mit einem `git rebase` überschreiben und wieder hochladen. Und richtig chaotisch wird es, wenn Sie versuchen, deren Arbeit in Ihre eigene zu integrieren.

Lassen Sie uns ein Beispiel betrachten, wie ein Rebase von Änderungen, die Sie veröffentlicht haben, Probleme verursachen kann.
Angenommen, Sie klonen von einem zentralen Server und werkeln ein bisschen daran rum.
Ihr Commit-Verlauf sieht aus wie dieser:

.Klonen Sie ein Repository und bauen Sie darauf Ihre Arbeit auf
image::images/perils-of-rebasing-1.png["Klonen Sie ein Repository und nehmen Sie Änderungen daran vor."]

Ein anderer arbeitet unterdessen weiter, macht einen Merge und lädt seine Arbeit auf den zentralen Server hoch.
Sie holen die Änderungen ab und führen den neuen Remote-Branch mit Ihrer Arbeit zusammen, sodass Ihr Verlauf wie so aussieht.

.Holen Sie weitere Commits ab und führen Sie diese mit Ihrer Arbeit zusammen
image::images/perils-of-rebasing-2.png["Holen Sie weitere Commits ab und führen Sie diese mit Ihrer Arbeit zusammen."]

Als nächstes entscheidet sich die Person, welche die zusammengeführte Arbeit hochgeladen hat, dies rückgängig zu machen und stattdessen ihre Arbeit mittels Rebase hinzuzufügen. Sie führt dazu die Anweisung `git push --force` aus, um den Verlauf auf dem Server zu überschreiben.
Sie holen das Ganze dann von diesem Server ab und laden die neuen Commits herunter.

[[_pre_merge_rebase_work]]
.Jemand lädt Commits nach einem Rebase hoch und verwirft damit Commits, auf denen Ihre Arbeit basiert
image::images/perils-of-rebasing-3.png["Jemand lädt Commits nach einem Rebase hoch und verwirft damit Commits, auf denen Ihre Arbeit basiert."]

Jetzt sitzen Sie beide in der Klemme.
Wenn Sie ein `git pull` durchführen, würden Sie einen Merge-Commit erzeugen, welcher beide Entwicklungslinien einschließt, und Ihr Repository würde so aussehen:

[[_merge_rebase_work]]
.Sie lassen die Änderungen nochmals in die selbe Arbeit einfließen in einen neuen Merge-Commit
image::images/perils-of-rebasing-4.png[Sie lassen die Änderungen nochmals in die selbe Arbeit einfließen in einen neuen Merge-Commit.]

Falls Sie die Anweisung `git log` ausführen, wenn Ihr Verlauf so aussieht, würden Sie zwei Commits sehen, bei denen Autor, Datum und Nachricht übereinstimmen, was verwirrend sein würde.
Des Weiteren würden Sie, wenn Sie diesen Verlauf auf den Server hochladen, alle diese vom Rebase stammenden Commits auf dem zentralen Server neu einführen, was die Leute weiter durcheinander bringen könnte.
Man kann ziemlich sicher davon ausgehen, dass der andere Entwickler `C4` und `C6` nicht im Verlauf haben möchte; das ist der Grund, warum derjenige das Rebase überhaupt gemacht hat. 

[[_rebase_rebase]]
==== Rebase, wenn Sie Rebase durchführen

Wenn Sie in eine Situation wie diese geraten *sind*, hat Git einige weitere Zaubertricks auf Lager, welche Ihnen da raus helfen könnten.
Wenn irgendjemand aus Ihrem Team Änderungen hochlädt unter Verwendung der Option `--force` und dabei Arbeit überschreibt, auf der Sie Ihre Arbeit aufgebaut haben, ist es Ihre Herausforderung herauszufinden, was Ihnen gehört und was derjenige überschrieben hat.

Es stellt sich heraus, dass Git zusätzlich zur SHA-1-Pürfsumme auch eine Prüfsumme berechnet, welche genau auf dem Patch basiert, der mit dem Commit eingeführt wurde.
Dies nennt man eine ``patch-id'' .

Wenn sie Arbeit herunterladen, welche neu geschrieben wurde, und diese mit mittels Rebase an der Spitze der Commits von Ihrem Partner hinzufügen, kann Git häufig erfolgreich herausfinden, was einzig und allein Ihre Commits sind und diese an der Spitze des neuen Branches anwenden. 

Wenn wir im vorhergehenden Szenario beispielsweise bei <<_pre_merge_rebase_work>> die Anweisung `git rebase teamone/master` ausführen, anstatt ein Merge durchzuführen, dann wird Git:

* bestimmen, welche Änderungen an unserem Branch einmalig sind (C2, C3, C4, C6, C7)
* bestimmen, welche der Commits keine Merge-Commits sind (C2, C3, C4)
* bestimmen, welche Commits nicht neu in den Zielbranch geschrieben wurden (bloß C2 und C3, da C4 der selbe Patch wie C4' ist)
* diese Commits an der Spitze des Branches `teamone/master` anwenden

Statt des Ergebnisses, welches wir in <<_merge_rebase_work>> sehen, würden wir etwas erhalten, was irgendwie mehr so wäre wie <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase an der Spitze von Änderungen eines "force-pushed"-Rebase.
image::images/perils-of-rebasing-5.png[Rebase an der Spitze von Änderungen eines "force-pushed"-Rebase.]

Dies funktioniert nur, wenn es sich bei C4 und C4', welche Ihr Teamkollege gemacht hat, um fast genau den selben Patch handelt.
Andernfalls kann das Rebase nicht erkennen, dass es sich um ein Duplikat handelt, und es wird ein weiterer C4-ähnlicher Patch hinzugefügt (der wahrscheinlich nicht sauber angewendet wird, da die Änderungen zumindest bereits vorhanden wären).

Sie können dies auch vereinfachen, indem Sie die Anweisung `git pull --rebase` anstatt eines normalen `git pull` ausführen.
Oder Sie könnten es manuell durchführen mit einem `git fetch` gefolgt von einem `git rebase teamone/master` in diesem Fall.

Wenn Sie `git pull` benutzen und `--rebase` zur Standardeinstellung machen wollen, können Sie den `pull.rebase`-Konfigurationswert mit etwas wie `git config --global pull.rebase true` einstellen.

Wenn Sie Rebasing als eine Möglichkeit betrachten, um aufzuräumen und mit Commits zu arbeiten, bevor Sie diese hochladen und wenn Sie Rebase nur auf Commits anwenden, die noch nie öffentlich zugänglich waren, können Sie nichts falsch machen.
Wenn Sie Rebase auf Commits anwenden, die bereits veröffentlicht wurden und Leute vielleicht schon ihre Arbeit darauf aufgebaut haben, dann können Sie sich auf frustrierenden Ärger gefasst machen, und auf den Hohn Ihrer Teamkollegen.

Wenn Sie oder ein Kollege es an irgendeinem Punkt als unbedingt notwendig erachten, stellen Sie sicher, dass alle darüber informiert wurden, anschließend die Anweisung `git pull --rebase` auszuführen, um die Schmerzen danach etwas erträglicher zu machen.

==== Rebase im Vergleich zu Merge

(((merging, vs. rebasing)))
Nachdem Sie jetzt Rebasing und Merging in Aktion erlebt haben, fragen Sie sich vielleicht, was davon besser ist.
Bevor wir dies beantworten können, lassen Sie uns ein klein wenig zurückblicken und darüber reden, was der Verlauf bedeutet.

Ein Standpunkt ist, dass der Commit-Verlauf Ihres Repositorys eine *Aufzeichnung davon ist, was wirklich passierte".
Es ist ein geschichtliches Dokument, eigenständig kostbar, und sollte nicht manipuliert werden.
Aus diesem Blickwinkel ist die Änderung des Verlaufs fast Gotteslästerung; Sie _lügen_ darüber, was sich wirklich ereignet hat.
Aber was ist, wenn es eine chaotische Reihe von Merge-Commits gibt?
Das ist, wie es dazu gekommen ist und das Repository sollte das für die Nachwelt erhalten.

Der entgegengesetzte Standpunkt ist, dass der Commit-Verlauf die *Geschichte davon ist, wie Ihr Projekt gemacht wurde".
Sie würden den ersten Entwurf eines Buches auch nicht veröffentlichen, und die Anleitung dafür, wie Ihre Software zu warten ist, verdient eine sorgfältige Bearbeitung.
Dies ist das Lager, welches Werkzeuge wie Rebase und Filter-Branch benutzt, um die Geschichte so zu erzählen, wie es für künftige Leser am besten ist.

Nun zu der Frage, ob Zusammenführen oder Rebase besser ist: Sie haben hoffentlich erkannt, dass es nicht so einfach ist.
Git ist ein mächtiges Werkzeug und es ermöglicht Ihnen, viele Dinge an und mit Ihrem Verlauf anzustellen, aber alle Teams und alle Projekte sind verschieden.
Da Sie jetzt wissen, wie diesen beiden Techniken funktionieren, müssen Sie selbst entscheiden, welche davon in Ihrer besonderen Situation am besten geeignet ist. 

Für gewöhnlich lassen sich die Vorteile von beiden Techniken nutzen, indem Sie lokale Änderungen, die Sie gemacht aber noch nicht veröffentlicht haben, mittels Rebase hinzufügen, um den Verlauf zu bereinigen, aber niemals ein Rebase an Commits durchführen, die Sie bereits irgendwohin hochgeladen haben.
