[[_remote_branches]]
=== Remote-Branches

(((branches, remote)))(((references, remote)))
Remote-Referenzen sind Referenzen (Zeiger) in Ihren Remote-Repositorys, einschließlich Branches, Tags usw.
Sie können eine vollständige, ausführliche Liste von Remote-Referenzen bekommen, wenn Sie die Anweisungen `git ls-remote (remote)` oder `git remote show (remote)` ausführen, für Remote-Branches sowie für weitere Informationen.
Häufige werden jedoch Remote-Tracking-Branches genutzt.

Remote-Tracking-Branches sind Referenzen auf den Zustand von Remote-Branches.
Sie sind lokale Referenzen, die Sie nicht bewegen können, sie werden automatisch für Sie bewegt, sobald Sie irgendeine Netzwerkkommunikation durchführen.
Entfernte Branches dienen als Lesezeichen, um Sie daran zu erinnern, an welcher Position sich die Branches in Ihren entfernten Repositorys befanden, als Sie sich zum letzten Mal mit ihnen verbunden haben.

Sie haben die Form `(Remote-Repository)/(Branch)`.
Wenn Sie beispielsweise wissen möchten, wie der `master`-Branch in Ihrem `origin`-Repository ausgesehen hat, als Sie zuletzt Kontakt mit ihm hatten, dann würden Sie den `origin/master`-Branch überprüfen.
Wenn Sie mit einem Mitarbeiter an einem Problem gearbeitet haben und dieser bereits einen `iss53`-Branch hochgeladen hat, besitzen Sie möglicherweise Ihren eigenen lokalen `iss53`-Branch; aber der Branch auf dem Server würde auf den Commit von `origin/iss53` zeigen.

Das kann ein wenig verwirrend sein, lassen Sie uns also ein Besipiel betrachten.
Angenommen, Sie haben in Ihrem Netzwerk einen Git-Server mit der Adresse `git.ourcompany.com`.
Wenn Sie von diesem klonen, erhält der Server von der Git-Anweisung `clone` automatisch den Namen `origin`, lädt all seine Daten herunter, erstellt einen Zeiger zu dem Commit, auf den dessen `master`-Branch zeigt und benennt ihn lokal `origin/master`.
Git gibt Ihnen auch Ihren eigenen lokalen `master`-Branch mit der gleichen Ausgangsposition wie `origin/master`-Branch, damit Sie einen Punkt, wo Sie mit Ihrer Arbeit beginnen können.

[NOTE]
.``origin'' ist nichts besonderes
====
Genau wie der Branchname ``master'' bei Git keine besondere Bedeutung hat, hat auch ``origin'' keine.
Während ``master'' die Standardbezeichnung für einen Anfangsbranch ist, wenn Sie die Anweisung `git init` ausführen, was der einzige Grund dafür ist, warum er so weit verbreitet ist, wird ``origin'' als Standardbezeichnung für ein entferntes Repository vergeben, wenn Sie die Anweisung `git clone` ausführen.
Wenn Sie statt dessen die Anweisung `git clone -o booyah` ausführen, erhalten Sie `booyah/master` als entfernten Standardbranch.(((origin)))
====

.Entfernte und lokale Repositorys nach dem Klonen
image::images/remote-branches-1.png[Entfernte und lokale Repositorys nach dem Klonen.]

Wenn Sie ein wenig an Ihrem lokalen `master`-Branch arbeiten und in der Zwischenzeit jemand anders etwas zu `git.ourcompany.com` hochlädt und damit dessen `master`-Branch aktualisiert, dann bewegen sich eure Verläufe unterschiedlich vorwärts.
Und solange Sie keinen Kontakt mit Ihrem `origin`-Server aufnehmen, bewegt sich Ihr `origin/master`-Zeiger nicht.

.Lokale und entfernte Änderungen können auseinander laufen
image::images/remote-branches-2.png[Lokale und entfernte Änderungen können auseinander laufen.]

Um Ihre Arbeit zu synchronisieren, führen Sie die Anweisung `git fetch origin` aus.
Die Anweisung schlägt nach, welcher Server `orgin` ist (in diesem Fall `git.ourcompany.com`), holt alle Daten, die Sie noch nicht haben, und aktualisiert Ihre lokale Datenbank, indem es Ihren `orgin/master`-Zeiger auf seine neue, aktuellere Position bewegt.

.`git fetch` aktualisiert Ihre entfernten Verweise
image::images/remote-branches-3.png[`git fetch` aktualisiert Ihre entfernten Verweise.]

Um den Umgang mit mehreren Remote-Servern zu veranschaulichen und um zu sehen, wie Remote-Branches bei diesen Remote-Projekten aussehen, nehmen wir an, dass Sie einen weiteren internen Git-Server haben, welcher von einem Ihrer Sprint-Teams nur zur Entwicklung genutzt wird.
Diesen Server erreichen wir unter `git.team1.ourcompany.com`.
Sie können ihn zu dem Projekt, an dem Sie gegenwärtig arbeiten, als neuen Remote-Server hinzufügen, indem Sie die Anweisung `git remote add` ausführen, wie wir bereits in <<_git_basics_chapter>> behandelt haben.
Nennen Sie diesen Remote-Server `teamone`, was Ihre Kurzbezeichnung für die gesamte URL sein wird.

.Hinzufügen eines weiteren entfernten Servers
image::images/remote-branches-4.png[Hinzufügen eines weiteren entfernten Servers.]

Jetzt können Sie die Anweisung `git fetch teamone` ausführen, um alles vom Server zu holen, was Sie noch nicht haben.
Da auf diesem Server eine Teilmenge der Daten ist, welche sich gerade jetzt auf Ihrem `origin`-Server befinden, holt Git keine Daten ab, aber es stellt einen entfernten Branch namens `teamone/master` so ein, dass er auf den Commit zeigt, den `teamone` als seinen `master`-Branch hat.

.Remote-Tracking-Branch für `teamone/master`
image::images/remote-branches-5.png[Remote-Tracking-Branch für `teamone/master`.]

[[_pushing_branches]]
==== Pushing
==== Hochladen (Pushing)

(((pushing)))
Wenn Sie einen Branch mit der Welt teilen möchten, müssen Sie ihn auf einen Remote-Server hochladen, auf dem Sie Schreibrechte besitzen.
Ihre lokalen Branches werden nicht automatisch mit den Remote-Servern synchronisiert, wenn Sie etwas hochladen – Sie müssen die Branches explizit hochladen (push), die Sie veröffentlichen wollen.
Auf diese Weise können Sie private Branches, die Sie nicht veröffentlichen wollen, zum Arbeiten benutzen und nur die Themen-Branches hochladen, an denen Sie mitarbeiten wollen.

Wenn Sie einen Zweig namens `serverfix` besitzen, an dem Sie mit anderen arbeiten möchten, dann können Sie diesen auf dieselbe Weise hochladen wie Ihren ersten Branch.
Führen Sie die Anweisung `git push (remote) (branch)` aus:(((git commands, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

This is a bit of a shortcut.
Git automatically expands the `serverfix` branchname out to `refs/heads/serverfix:refs/heads/serverfix`, which means, ``Take my serverfix local branch and push it to update the remote's serverfix branch.''
We'll go over the `refs/heads/` part in detail in <<_git_internals>>, but you can generally leave it off.
You can also do `git push origin serverfix:serverfix`, which does the same thing – it says, ``Take my serverfix and make it the remote's serverfix.''
You can use this format to push a local branch into a remote branch that is named differently.
If you didn't want it to be called `serverfix` on the remote, you could instead run `git push origin serverfix:awesomebranch` to push your local `serverfix` branch to the `awesomebranch` branch on the remote project.

Das ist eine kleine Abkürzung.
Git erweitert die Branchbezeichnung `serverfix` automatisch zu `refs/heads/serverfix:refs/heads/serverfix`, was soviel bedeutet wie ``Nimm meinen lokalen `serverfix`-Branch und aktualisiere damit den `serverfix`-Branch auf meinem Remote-Server''.
Wir werden den `refs/heads/`-Teil in <<_git_internals>> noch näher beleuchten, Sie können ihn aber in der Regel weglassen.
Sie können auch die Anweisung `git push origin serverfix:serverfix` ausführen, was das Gleiche bewirkt – es bedeutet ``Nimm meinen `serverfix` und mach ihn zum `serverfix` des Remote-Servers''.
Sie können dieses Format auch benutzen, um einen lokalen Branch in einen Remote-Branch mit anderem Namen zu laden.
Wenn Sie ihn auf dem Remote-Server nicht `serverfix` nennen wollen, könnten Sie stattdessen die Anweisung `git push origin serverfix:awesomebranch` ausführen, um Ihren lokalen `serverfix`-Branch in den `awesomebranch`-Branch des Remote-Projekts zu laden.

[NOTE]
.Geben Sie Ihr Passwort jedes Mal ein
====
Wenn Sie eine HTTPS-URL benutzen, um darüber hochzuladen, wird Sie der Git-Server zur Authentifizierung nach Ihrem Benutzernamen und Passwort fragen.
Standardmäßig wird er Sie im Terminal dazu auffordern, diese Informationen einzugeben, damit der Server Ihnen mitteilen kann, ob Sie berechtigt sind, etwas hochzuladen. 

Wenn Sie es nicht jedes Mal eingeben wollen, wenn Sie etwas hochladen, da können Sie einen ``credential cache'' einstellen.
Am einfachsten ist es, die Informationen nur für einige Minuten im Speicher zu behalten, was Sie einfach mit der Anweisung `git config --global credential.helper cache` bewerkstelligen können.

Weitere Informationen zu den verschiedenen verfügbaren ``credential cache''-Optionen finden Sie in <<_credential_caching>>.
====

Das nächste Mal, wenn einer Ihrer Mitarbeiter Daten von Server abholt, wird er eine Referenz auf die Server-Version des Branches `serverfix` unter dem Remote-Branch `origin/serverfix` erhalten:

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

Es ist wichtig zu beachten, dass Sie beim Abholen eines neuen Remote-Branches nicht automatisch eine lokale, bearbeitbare Kopie desselben erhalten.
Mit anderen Worten, in diesem Fall bekommen Sie keinen neuen `serverfix`-Branch – sondern nur einen `origin/serverfix`-Zeiger, den Sie nicht verändern können.

Um diese Änderungen in Ihren gegenwärtigen Arbeitsbranch einfließen zu lassen, können Sie die Anweisung `git merge origin/serverfix` ausführen.
Wenn Sie Ihren eigenen Branch `serverfix` haben wollen, andem Sie arbeiten können, dann können Sie diesen auf Grundlage des Remote-Branches erstellen:

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Dies erstellt Ihnen einen lokalen Branch, an dem Sie arbeiten können und der dort beginnt, wo `origin/serverfix` ist.

[[_tracking_branches]]
==== Tracking-Branches

(((branches, tracking)))(((branches, upstream)))
Das Auschecken eines lokalen Branches von einem Remote-Branch erzeugt automatisch einen sogenannten ``Tracking-Branch'' (oder manchmal einen ``Upstream-Branch'').
Tracking-Branches sind lokale Branches, die eine direkte Beziehung zu einem Remote-Branch haben.
Wenn Sie sich auf einem Tracking-Branch befinden und `git pull` eingeben, weiß Git automatisch, von welchem Server Daten abzuholen sind und in welchen Branch diese einfließen sollen.

Wenn Sie ein Repository klonen, wird automatisch ein `master`-Branch erzeugt, welcher `origin/master` verfolgt.
Sie können jedoch auch andere Tracking-Branches erzeugen, wenn Sie wünschen,  – welche die nicht Zweige auf `origin` und dessen `master`-Branch verfolgen.
Der einfachste Fall ist das Beispiel, dass Sie gerade gesehen haben, die Ausführung der Anweisung `git checkout -b [branch] [remotename]/[branch]`.
Mit der Git-Version 1.6.2 oder später kannst Du auch die `--track`-Kurzvariante nutzen:

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Tatsächlich ist dies so gebräuchlich, dass es sogar eine Verknüpfung für diese Verknüpfung gibt. Wenn der Name des Branches, den Sie auschecken möchten, (a) nicht existiert und (b) nur mit einem Namen auf einem einzigen Remote-Branch übereinstimmt, erzeugt Git einen Tracking-Zweig für Sie:

[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Um einen lokalen Branch mit einem anderen Namen als dem des Remote-Branches zu erzeugen, können Sie einfach die erste Version mit einem anderen lokalen Branch-Namen verwenden:

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

Ihr lokaler Branch `sf` wird jetzt automatisch von `origin/serverfix` herunterladen.

Wenn Sie bereits einen lokalen Branch haben und ihn auf einen Remote-Branch einstellen wollen, den Sie gerade heruntergeladen haben, oder Sie den Upstream-Branch ändern wollen, können Sie die Anweisung `git branch` zusammen mit der Option `-u` oder `--set-upstream-to` benutzen, um diesen zu jeder Zeit explizit einzustellen.  

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
.Upstream Kürzel
====
Wenn Sie einen Tracking-Branch eingerichtet haben, können Sie auf diesen mit den Kürzeln `@{upstream}` oder `@{u}` verweisen.
Wenn Sie sich also auf dem `master`-Branch befinden und dieser `origin/master` verfolgt, können Sie etwas wie `git merge @{u}` anstatt von `git merge origin/master` ausführen, wenn Sie wollen.(((+++@{u}+++)))(((+++@{upstream}+++)))
====

Wenn Sie die Tracking-Branches sehen wollen, die Sie eingerichtet haben, können Sie die Anweisung `git branch` zusammen mit der Option `-vv` ausführen.
Dies listet Ihre lokalen Branches zusammen mit weiteren Informationen auf, einschließlich was jeder Branch verfolgt und ob Ihr lokaler Branch voraus, hinterher oder beides ist.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
----

Hier können wir also sehen, dass unser `iss53`-Branch den Branch `origin/iss53` verfolgt und die Information ``ahead 2'' bedeutet, dass wir zwei lokale Commits haben, welche noch nicht auf den Server hochgeladen wurden.
Wir können außerdem sehen, dass unser `master`-Branch `origin/master` verfolgt und auf den neuesten Stand ist.
Als nächstes sehen wir, dass unser `serverfix`-Branch den Branch `server-fix-good` auf unserem `teamone`-Server verfolgt und ``ahead 3, behind 1'' bedeutet, dass es einen Commit auf dem Server gibt, den wir noch nicht einfließen lassen haben, und drei lokale Commits existieren, die wir noch nicht hochgeladen haben.
Zum Schluss können wir sehen, dass unser `testing`-Branch gar keinen Remote-Branch verfolgt.

Es ist wichtig zu beachten, dass diese Zahlen den Zustand zu dem Zeitpunkt beschreiben, als Sie zum letzten Mal Daten vom Server abgeholt haben.
Diese Anweisung greift nicht auf die Server zu, sie liefert nur die Informationen, welche beim letzten Server-Kontakt lokal zwischengespeichert wurden.
Wenn Sie vollkommen aktuelle Zahlen von ``ahead'' und ``behind'' wollen, dann müssen Sie, kurz bevor Sie die Anweisung ausführen, von all Ihren Remote-Servern Daten abholen (fetch).
Sie könnten das so machen:

[source,console]
----
$ git fetch --all; git branch -vv
----

==== Herunterladen

(((pulling)))
Während die Anweisung `git fetch` alle Änderungen auf dem Server abholt, die Sie zurzeit noch nicht haben, wird sie an Ihrem Arbeitsverzeichnis überhaupt nichts verändern.
Sie wird einfach die Daten für Sie holen und Ihnen das Zusammenführen überlassen.
Es gibt jedoch eine Anweisung namens `git pull`, welche im Grunde genommen ein `git fetch` ist, dem in den meisten Fällen augenblicklich ein `git merge` folgt.
Wenn Sie einen Tracking-Branch eingerichtet haben, wie es im letzten Abschnitt demonstriert wurde, entweder durch explizites Einrichten oder indem er für Sie durch die Anweisungen `clone` oder `checkout` erzeugt wurde, wird die Anweisung `git pull` nachschlagen, welchen Server und Branch Ihr gegenwärtiger Branch gerade verfolgt, die Daten von diesem Server abholen und dann versuchen, die Daten in diesen Remote-Branch einfließen zu lassen.

Generell ist es besser, einfach explizit die Anweisungen `git fetch` und `git merge` zu benutzen, da die Zauberei der Anweisung `git pull` häufig verwirrend sein kann.

[[_delete_branches]]
==== Löschen von Remote-Branches

(((branches, deleting remote)))
Stellen wir uns vor, Sie sind mit Ihrem Remote-Branch fertig – Sie und Ihre Mitarbeiter sind fertig mit einer neuen Funktion und haben sie in den `master`-Branch des Remote-Servers (oder in welchem Branch auch immer sich Ihr stabiler Code befindet) einfließen lassen.
Sie können einen Remote-Branch löschen, indem die Anweisung `git push` zusammen mit der Option `--delete` ausführen.
Wenn Sie Ihren `serverfix`-Branch vom Server löschen wollen, führen Sie folgende Anweisung aus:

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

All dies entfernt im Grunde nur den Zeiger auf dem Server.
Der Git-Server behält normalerweise die Daten dort noch eine Weile, bis eine Müllsammlung (garbage collection) durchgeführt wird, wenn also versehentlich was gelöscht wurde, ist es häufig einfach wiederherzustellen.
